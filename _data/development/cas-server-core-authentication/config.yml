---
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties"
  type: "java.lang.String"
  description: "A number of authentication handlers are allowed to determine whether\
    \ they can operate on the provided credential and as such lend themselves to be\
    \ tried and tested during the authentication handler selection phase. The credential\
    \ criteria may be one of the following options:<ul> <li>1) A regular expression\
    \ pattern that is tested against the credential identifier.</li> <li>2) A fully\
    \ qualified class name of your own design that implements {@code Predicate<Credential>}.</li>\
    \ <li>3) Path to an external Groovy script that implements the same interface.</li>\
    \ </ul>"
  name: "cas.authn.accept.credential-criteria"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties"
  type: "java.lang.Boolean"
  description: "Indicates whether the authentication strategy is enabled. The strategy\
    \ may also be disabled explicitly if the {@link #users} is left blank."
  name: "cas.authn.accept.enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties"
  type: "java.lang.String"
  description: "Name of the authentication handler."
  name: "cas.authn.accept.name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties"
  type: "java.lang.Integer"
  description: "Order of the authentication handler in the chain."
  name: "cas.authn.accept.order"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.accept.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.accept.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.accept.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.accept.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.accept.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Boolean"
  description: "Indicates whether account state handling should be enabled to process\
    \ warnings or errors reported back from the authentication response, produced\
    \ by the source."
  name: "cas.authn.accept.password-policy.account-state-handling-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Boolean"
  description: "Indicates if warning should be displayed, when the ldap attribute\
    \ value matches the {@link #warningAttributeValue}."
  name: "cas.authn.accept.password-policy.display-warning-on-match"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Boolean"
  description: "Whether password policy should be enabled."
  name: "cas.authn.accept.password-policy.enabled"
  defaultValue: true
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPasswordPolicyProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.accept.password-policy.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Integer"
  description: "When dealing with FreeIPA, indicates the number of allows login failures."
  name: "cas.authn.accept.password-policy.login-failures"
  defaultValue: 5
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.util.Map<java.lang.String,java.lang.Class<? extends javax.security.auth.login.LoginException>>"
  description: "Key-value structure (Map) that indicates a list of boolean attributes\
    \ as keys. If either attribute value is true, indicating an account state is flagged,\
    \ the corresponding error can be thrown. Example {@code accountLocked=javax.security.auth.login.AccountLockedException}"
  name: "cas.authn.accept.password-policy.policy-attributes"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties$PasswordPolicyHandlingOptions"
  description: "Decide how authentication should handle password policy changes. Acceptable\
    \ values are: <ul> <li>{@code DEFAULT}: Default password policy rules handling\
    \ account states.</li> <li>{@code GROOVY}: Handle account changes and warnings\
    \ via Groovy scripts</li> <li>{@code REJECT_RESULT_CODE}: Handle account state\
    \ only if the authentication result code isn't blocked</li> </ul>DEFAULT:Default\
    \ option to handle policy changes..GROOVY:Handle account password policies via\
    \ Groovy..REJECT_RESULT_CODE:Strategy to only activate password policy\nif the\
    \ authentication response code is not blocked.."
  name: "cas.authn.accept.password-policy.strategy"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Boolean"
  description: "Always display the password expiration warning regardless."
  name: "cas.authn.accept.password-policy.warn-all"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.String"
  description: "Used by an account state handling policy that only calculates account\
    \ warnings in case the entry carries this attribute."
  name: "cas.authn.accept.password-policy.warning-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.String"
  description: "Used by an account state handling policy that only calculates account\
    \ warnings in case the entry carries an attribute {@link #warningAttributeName}\
    \ whose value matches this field."
  name: "cas.authn.accept.password-policy.warning-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Integer"
  description: "This is used to calculate a warning period to see if account expiry\
    \ is within the calculated window."
  name: "cas.authn.accept.password-policy.warning-days"
  defaultValue: 30
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.accept.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.accept.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.accept.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.accept.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.accept.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties"
  type: "java.lang.String"
  description: "Accepted users for authentication, in the syntax of {@code uid::password}."
  name: "cas.authn.accept.users"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationIPIntelligenceProperties.BlackDot"
  type: "java.lang.String"
  description: "Include your contact information so you can be notified if a problem\
    \ arise or if there are core changes."
  name: "cas.authn.adaptive.ip-intel.black-dot.email-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationIPIntelligenceProperties.BlackDot"
  type: "java.lang.String"
  description: "<ul> <li>{@code DYNA_LIST}: If you get a value between 0 - 1, exclusive\
    \ (like 0.99, 0.99999, 0.97), these values are generated by dynamic checks which\
    \ looks for characteristics of the given IP. IPs that are either manually banned\
    \ or seen on a public proxy site will return a value of 1. If you only want manually\
    \ banned or public proxies, then in your code just look for the value \"1\". However,\
    \ there are many IPs that haven't gone through manual review and IPs can change\
    \ behavior very frequently (which is why dynamic checks exist in the first place).\
    \ If you only look for the value of \"1\", then expect to have more proxy / VPN\
    \ / bad IPs go through your system, however, false positives are less likely if\
    \ you use the dynamic ban list option. If you wish to use only manually banned\
    \ and public proxy IPs, append the parameter flags=m, the system will only return\
    \ a result of 0 or 1. This option is the best to start off with that will have\
    \ a noticeable impact in bot / proxy / VPN traffic, especially if you don't have\
    \ any data sets to test with the system.</li> <li>{@code DYNA_CHECK}: In this\
    \ scenario, you want to use dynamic checks as well but you want to skip additional\
    \ checks to see if the IP is a bad ip (see What do you mean by \"Bad IP\"?). In\
    \ this mode, some bad IPs are still detected but the system does not attempt to\
    \ go through the full bad IPs check because the time for the extra checks vary\
    \ wildly (between an extra 200ms to 2 seconds). In this mode, false positives\
    \ are more likely than dynamic ban lists only. Scores are lower compared to the\
    \ full IP check (without any flag options) because less attributes are considered.\
    \ If you wish to use dynamic ban list and dynamic checks only, append the parameter\
    \ flags=b. This option is the best if dynamic ban lists isn't catching enough\
    \ IPs but you don't want to run the full check because it takes too long and/or\
    \ you want to have a predictable execution time.</li> <li>{@code FULL}: Let the\
    \ system to do a full lookup with one query.</li> </ul>"
  name: "cas.authn.adaptive.ip-intel.black-dot.mode"
  defaultValue: "DYNA_LIST"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationIPIntelligenceProperties.BlackDot"
  type: "java.lang.String"
  description: "URL endpoint of the service to make API calls."
  name: "cas.authn.adaptive.ip-intel.black-dot.url"
  defaultValue: "http://check.getipintel.net/check.php?ip=%s"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyAdaptiveAuthenticationIPIntelligenceProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.adaptive.ip-intel.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.adaptive.ip-intel.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.adaptive.ip-intel.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.adaptive.ip-intel.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.RestfulAdaptiveAuthenticationIPIntelligenceProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.adaptive.ip-intel.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationProperties"
  type: "java.lang.String"
  description: "Comma-separated list of strings representing browser user agents to\
    \ be rejected from participating in authentication transactions."
  name: "cas.authn.adaptive.reject-browsers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationProperties"
  type: "java.lang.String"
  description: "Comma-separated list of strings representing countries to be rejected\
    \ from participating in authentication transactions."
  name: "cas.authn.adaptive.reject-countries"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationProperties"
  type: "java.lang.String"
  description: "Comma-separated list of strings representing IP addresses to be rejected\
    \ from participating in authentication transactions."
  name: "cas.authn.adaptive.reject-ip-addresses"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationProperties"
  type: "java.util.Map<java.lang.String,java.lang.String>"
  description: "A map of ({@code mfaProviderId -> adaptiveRegexPattern}) that tells\
    \ CAS when to trigger an MFA authentication transaction. <p> This property binds\
    \ a valid mfa provider to an adaptive regex pattern representing either IP address,\
    \ user-agent or geolocation. When either of those collected pieces of adaptive\
    \ data matches configured regex pattern during authentication event, an MFA authentication\
    \ transaction is triggered for an MFA provider represented by the map's key. </p>"
  name: "cas.authn.adaptive.require-multifactor"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AdaptiveAuthenticationProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties>"
  description: "This property binds a valid mfa provider to a collection of rules\
    \ that deal with triggering mfa based on that provider based on properties of\
    \ date/time. One may want to force mfa during weekends, after hours, etc and the\
    \ ruleset provides a modest configuration set where time can also be treated as\
    \ trigger."
  name: "cas.authn.adaptive.require-timed-multifactor"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties"
  type: "List<String>"
  description: "Trigger mfa on the following days of the week."
  name: "cas.authn.adaptive.require-timed-multifactor[].on-days"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties"
  type: "long"
  description: "Trigger mfa after this hour, specified in 24-hour format."
  name: "cas.authn.adaptive.require-timed-multifactor[].on-or-after-hour"
  defaultValue: "20"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties"
  type: "long"
  description: "Trigger mfa before this hour, specified in 24-hour format."
  name: "cas.authn.adaptive.require-timed-multifactor[].on-or-before-hour"
  defaultValue: "7"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.TimeBasedAuthenticationProperties"
  type: "java.lang.String"
  description: "The mfa provider id that should be triggered."
  name: "cas.authn.adaptive.require-timed-multifactor[].provider-id"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.lang.String"
  description: "Indicates how the results of multiple attribute repositories should\
    \ be aggregated together. Accepted values are {@code MERGE}, or {@code CASCADE}.\
    \ <ul> <li>{@code MERGE}: Default. Designed to query multiple repositories in\
    \ order and merge the results into a single result set.</li> <li>{@code CASCADE}:\
    \ Query multiple repositories in order and merge the results into a single result\
    \ set. As each repository is queried the attributes from the first query in the\
    \ result set are used as the query for the next repository. </li> </ul>"
  name: "cas.authn.attribute-repository.aggregation"
  defaultValue: "MERGE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.support.azuread.AzureActiveDirectoryAttributesProperties>"
  description: "Retrieve attributes from multiple Microsoft Graph instances."
  name: "cas.authn.attribute-repository.azure-active-directory"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.CouchbasePrincipalAttributesProperties"
  description: "Retrieve attributes from Couchbase repositories."
  name: "cas.authn.attribute-repository.couchbase"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.Set<java.lang.String>"
  description: "CAS provides the ability to release a bundle of principal attributes\
    \ to all services by default. This bundle is not defined on a per-service basis\
    \ and is always combined with attributes produced by the specific release policy\
    \ of the service, such that for instance, you can devise rules to always release\
    \ {@code givenName} and {@code cn} to every application, and additionally allow\
    \ other specific principal attributes for only some applications per their attribute\
    \ release policy."
  name: "cas.authn.attribute-repository.default-attributes-to-release"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.lang.Integer"
  description: "Indicates the global cache expiration period, once attributes are\
    \ fetched from the underlying attribute repository. A zero or negative value indicates\
    \ that no attribute caching should take place where attributes must always be\
    \ fetched from the source."
  name: "cas.authn.attribute-repository.expiration-time"
  defaultValue: 30
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.lang.String"
  description: "Expiration caching time unit for attributes."
  name: "cas.authn.attribute-repository.expiration-time-unit"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalAttributesProperties>"
  description: "Retrieve attributes from multiple Groovy scripts."
  name: "cas.authn.attribute-repository.groovy"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.GrouperPrincipalAttributesProperties"
  description: "Use Grouper to fetch principal attributes. You will also need to ensure\
    \ {@code grouper.client.properties} is available on the classpath (i.e. {@code\
    \ src/main/resources}) and it contains the following: <p> {@code grouperClient.webService.url\
    \ = http://192.168.99.100:32768/grouper-ws/servicesRest} {@code grouperClient.webService.login\
    \ = banderson} {@code grouperClient.webService.password = password}"
  name: "cas.authn.attribute-repository.grouper"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.JdbcPrincipalAttributesProperties>"
  description: "Retrieve attributes from multiple JDBC repositories."
  name: "cas.authn.attribute-repository.jdbc"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.JsonPrincipalAttributesProperties>"
  description: "Retrieve attributes from multiple JSON file repositories."
  name: "cas.authn.attribute-repository.json"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.LdapPrincipalAttributesProperties>"
  description: "Retrieve attributes from multiple LDAP servers."
  name: "cas.authn.attribute-repository.ldap"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.lang.Integer"
  description: "Indicates the global cache size used to store attributes retrieved\
    \ from the attribute repository."
  name: "cas.authn.attribute-repository.maximum-cache-size"
  defaultValue: 10000
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.lang.String"
  description: "Merging strategies can be used to resolve conflicts when the same\
    \ attribute are found from multiple sources. Accepted values are the following:\
    \ <ul> <li>{@code REPLACE}: Overwrites existing attribute values, if any.</li>\
    \ <li>{@code ADD}: Retains existing attribute values if any, and ignores values\
    \ from subsequent sources in the resolution chain.</li> <li>{@code MULTIVALUED}:\
    \ Combines all values into a single attribute, essentially creating a multi-valued\
    \ attribute. </li> <li>{@code NONE}: Doesn't merge attributes, ignores attributes\
    \ from non-authentication attribute repositories </li> </ul>"
  name: "cas.authn.attribute-repository.merger"
  defaultValue: "REPLACE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.RedisPrincipalAttributesProperties>"
  description: "Retrieve attributes from redis repositories."
  name: "cas.authn.attribute-repository.redis"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.lang.Boolean"
  description: "In the event that multiple attribute repositories are defined, setting\
    \ this option to {@code true} forces all repositories to produce a person object.\
    \ If any of the repositories fails to produce a person or person attributes, the\
    \ resolution engine will halt to short-circuit the process, failing to resolve\
    \ the person altogether."
  name: "cas.authn.attribute-repository.require-all-repository-sources"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.RestPrincipalAttributesProperties>"
  description: "Retrieve attributes from multiple REST endpoints."
  name: "cas.authn.attribute-repository.rest"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.ScriptedPrincipalAttributesProperties>"
  description: "Retrieve attributes from multiple scripted repositories."
  name: "cas.authn.attribute-repository.script"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalAttributesProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.StubPrincipalAttributesProperties"
  description: "Use stubbed attribute definitions as the underlying attribute repository\
    \ source. Static attributes that need to be mapped to a hardcoded value belong\
    \ here."
  name: "cas.authn.attribute-repository.stub"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.azure-active-directory.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.azure-active-directory.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.azure-active-directory.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.azure-active-directory.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.azure-active-directory.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.azure-active-directory.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.azure-active-directory.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.azure-active-directory.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.azure-active-directory.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.azure-active-directory.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.cassandra.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.cassandra.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.cassandra.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.cassandra.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.cassandra.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.cassandra.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.cassandra.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.cassandra.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.cassandra.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.cassandra.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.cloud-directory.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.cloud-directory.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.cloud-directory.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.cloud-directory.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.cloud-directory.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.cloud-directory.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.cloud-directory.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.cloud-directory.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.cloud-directory.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.cloud-directory.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.cognito.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.cognito.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.cognito.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.cognito.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.cognito.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.cognito.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.cognito.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.cognito.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.cognito.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.cognito.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationEngineProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationEngineProcessorProperties"
  description: "Groovy script to handle the authentication post-processor."
  name: "cas.authn.core.engine.groovy-post-processor"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationEngineProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationEngineProcessorProperties"
  description: "Groovy script to handle the authentication pre-processor."
  name: "cas.authn.core.engine.groovy-pre-processor"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.couch-db.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.couch-db.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.couch-db.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.couch-db.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.couch-db.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.couch-db.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.couch-db.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.couch-db.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.couch-db.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.couch-db.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.couchbase.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.couchbase.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.couchbase.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.couchbase.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.couchbase.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.couchbase.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.couchbase.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.couchbase.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.couchbase.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.couchbase.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationExceptionsProperties"
  type: "java.util.List<java.lang.Class<? extends java.lang.Exception>>"
  description: "Define custom exceptions that can then be mapped to message bundles\
    \ for custom error handling. <p> By default CAS is configured to recognize and\
    \ handle a number of exceptions for during authentication. Each exception has\
    \ the specific message bundle mapping so that a specific message could be presented\
    \ to end users on the login form. Any un-recognized or un-mapped exceptions results\
    \ in a generic message. To map custom exceptions, one would need map the exception,\
    \ they can be defined here and then linked to custom messages."
  name: "cas.authn.errors.exceptions"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.file.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.file.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.file.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.file.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.file.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.file.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.file.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.file.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.file.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.file.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties>"
  description: "Collection of settings related to JAAS authentication. These settings\
    \ are required to be indexed (i.e. jaas[0].xyz)."
  name: "cas.authn.jaas"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties"
  type: "java.lang.String"
  description: "A number of authentication handlers are allowed to determine whether\
    \ they can operate on the provided credential\nand as such lend themselves to\
    \ be tried and tested during the authentication handler selection phase.\nThe\
    \ credential criteria may be one of the following options:<ul>\n<li>1) A regular\
    \ expression pattern that is tested against the credential identifier.</li>\n\
    <li>2) A fully qualified class name of your own design that implements {@code\
    \ Predicate<Credential>}.</li>\n<li>3) Path to an external Groovy script that\
    \ implements the same interface.</li>\n</ul>"
  name: "cas.authn.jaas[].credential-criteria"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties"
  type: "java.lang.String"
  description: "Typically, the default realm and the KDC for that realm are indicated\
    \ in the Kerberos {@code krb5.conf} configuration file.\nHowever, if you like,\
    \ you can instead specify the realm value by setting this following system property\
    \ value.\n<p>If you set the realm property, you SHOULD also configure the kerberos\
    \ KDC system property.\n<p>Also note that if you set these properties, then no\
    \ cross-realm authentication is possible unless\na {@code krb5.conf} file is also\
    \ provided from which the additional information required for cross-realm authentication\n\
    may be obtained.\n<p>If you set values for these properties, then they override\
    \ the default realm and KDC values specified\nin {@code krb5.conf} (if such a\
    \ file is found). The {@code krb5.conf} file is still consulted if values for\
    \ items\nother than the default realm and KDC are needed. If no {@code krb5.conf}\
    \ file is found,\nthen the default values used for these items are implementation-specific."
  name: "cas.authn.jaas[].kerberos-kdc-system-property"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties"
  type: "java.lang.String"
  description: "Typically, the default realm and the KDC for that realm are indicated\
    \ in the Kerberos {@code krb5.conf} configuration file.\nHowever, if you like,\
    \ you can instead specify the realm value by setting this following system property\
    \ value.\n<p>If you set the realm property, you SHOULD also configure the kerberos\
    \ KDC system property.\n<p>Also note that if you set these properties, then no\
    \ cross-realm authentication is possible unless\na {@code krb5.conf} file is also\
    \ provided from which the additional information required for cross-realm authentication\n\
    may be obtained.\n<p>If you set values for these properties, then they override\
    \ the default realm and KDC values specified\nin {@code krb5.conf} (if such a\
    \ file is found). The {@code krb5.conf} file is still consulted if values for\
    \ items\nother than the default realm and KDC are needed. If no {@code krb5.conf}\
    \ file is found,\nthen the default values used for these items are implementation-specific."
  name: "cas.authn.jaas[].kerberos-realm-system-property"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties"
  type: "java.lang.String"
  description: "Typically set to {@code JavaLoginConfig} which is the default Configuration\
    \ implementation\nfrom the SUN provider. This type accepts a URI/path to a configuration\
    \ file as a valid parameter type specified via {@link #loginConfigurationFile}.\n\
    If this parameter is not specified, then the configuration information is loaded\
    \ from the sources described\nin the ConfigFile class specification. If this parameter\
    \ is specified, the configuration information is loaded solely from the specified\
    \ URI."
  name: "cas.authn.jaas[].login-config-type"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties"
  type: "java.lang.String"
  description: "Path to the location of configuration file (i.e. jaas.conf) that contains\
    \ the realms and login modules."
  name: "cas.authn.jaas[].login-configuration-file"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties"
  type: "java.lang.String"
  description: "Name of the authentication handler."
  name: "cas.authn.jaas[].name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties"
  type: "int"
  description: "Order of the authentication handler in the chain."
  name: "cas.authn.jaas[].order"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'.\nRelevant when the\
    \ type used is 'DEFAULT'."
  name: "cas.authn.jaas[].password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'.\nRelevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.jaas[].password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders.\nSecret usually is an optional setting."
  name: "cas.authn.jaas[].password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "int"
  description: "Strength or number of iterations to use for password hashing.\nUsually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders.\nUsed by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.jaas[].password-encoder.strength"
  defaultValue: "16"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use.\nType may be specified as\
    \ blank or 'NONE' to disable password encoding.\nIt may also refer to a fully-qualified\
    \ class name that implements\nthe Spring Security's {@code PasswordEncoder} interface\n\
    if you wish you define your own encoder.\n\nThe following types may be used:\n\
    <ul>\n    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\n\
    \    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest\n\
    \    algorithms via {@link #getCharacterEncoding()} and {@link #getCharacterEncoding()}.</li>\n\
    \    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength\
    \ provided and an optional secret.</li>\n    <li>{@code SCRYPT}: Use the {@code\
    \ SCryptPasswordEncoder}.</li>\n    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>\n    <li>{@code\
    \ STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>\n\
    \    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA\
    \ and SSHA (salted-SHA). The values\n    are base-64 encoded and have the label\
    \ {SHA} (or {SSHA}) prepended to the encoded hash.</li>\n    <li>{@code GLIBC_CRYPT}:\
    \ Use the {@code GlibcCryptPasswordEncoder} based on the\n    {@code encoding-algorithm},\
    \ strength provided and an optional secret.</li>\n    <li>{@code org.example.MyEncoder}:\
    \ An implementation of {@code PasswordEncoder} of your own choosing.</li>\n  \
    \  <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged\
    \ with handling password encoding operations.</li>\n</ul>"
  name: "cas.authn.jaas[].password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "boolean"
  description: "Indicates whether account state handling should be enabled to process\n\
    warnings or errors reported back from the authentication response, produced by\
    \ the source."
  name: "cas.authn.jaas[].password-policy.account-state-handling-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "boolean"
  description: "Indicates if warning should be displayed, when the ldap attribute\
    \ value\nmatches the {@link #warningAttributeValue}."
  name: "cas.authn.jaas[].password-policy.display-warning-on-match"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "boolean"
  description: "Whether password policy should be enabled."
  name: "cas.authn.jaas[].password-policy.enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "int"
  description: "When dealing with FreeIPA, indicates the number of allows login failures."
  name: "cas.authn.jaas[].password-policy.login-failures"
  defaultValue: "5"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "Map<String,Class<? extends LoginException>>"
  description: "Key-value structure (Map) that indicates a list of boolean attributes\
    \ as keys.\nIf either attribute value is true, indicating an account state is\
    \ flagged,\nthe corresponding error can be thrown.\nExample {@code accountLocked=javax.security.auth.login.AccountLockedException}"
  name: "cas.authn.jaas[].password-policy.policy-attributes"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "PasswordPolicyHandlingOptions"
  description: "Decide how authentication should handle password policy changes.\n\
    Acceptable values are:\n<ul>\n<li>{@code DEFAULT}: Default password policy rules\
    \ handling account states.</li>\n<li>{@code GROOVY}: Handle account changes and\
    \ warnings via Groovy scripts</li>\n<li>{@code REJECT_RESULT_CODE}: Handle account\
    \ state only if the authentication result code isn't blocked</li>\n</ul>"
  name: "cas.authn.jaas[].password-policy.strategy"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "boolean"
  description: "Always display the password expiration warning regardless."
  name: "cas.authn.jaas[].password-policy.warn-all"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.String"
  description: "Used by an account state handling policy that only calculates account\
    \ warnings\nin case the entry carries this attribute."
  name: "cas.authn.jaas[].password-policy.warning-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.String"
  description: "Used by an account state handling policy that only calculates account\
    \ warnings\nin case the entry carries an attribute {@link #warningAttributeName}\n\
    whose value matches this field."
  name: "cas.authn.jaas[].password-policy.warning-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "int"
  description: "This is used to calculate\na warning period to see if account expiry\
    \ is within the calculated window."
  name: "cas.authn.jaas[].password-policy.warning-days"
  defaultValue: "30"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "CaseConversion"
  description: "Indicate whether the principal identifier should be transformed\n\
    into upper-case, lower-case, etc.\nAccepted values are {@code NONE, UPPERCASE,\
    \ LOWERCASE}."
  name: "cas.authn.jaas[].principal-transformation.case-conversion"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\n\
    for username extractions. On a successful match, the first matched group\nin the\
    \ pattern will be used as the extracted username."
  name: "cas.authn.jaas[].principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.jaas[].principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.jaas[].principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Activated attribute repository identifiers\nthat should be used for\
    \ fetching attributes\nif attribute resolution is enabled.\nThe list here may\
    \ include identifiers separated by comma."
  name: "cas.authn.jaas[].principal.active-attribute-repository-ids"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "boolean"
  description: "Whether attribute repositories should be contacted\nto fetch person\
    \ attributes."
  name: "cas.authn.jaas[].principal.attribute-resolution-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Attribute name to use to indicate the identifier of the principal\
    \ constructed.\nIf the attribute is blank or has no values, the default principal\
    \ id will be used\ndetermined by the underlying authentication engine. The principal\
    \ id attribute\nusually is removed from the collection of attributes collected,\
    \ though this behavior\ndepends on the schematics of the underlying authentication\
    \ strategy."
  name: "cas.authn.jaas[].principal.principal-attribute"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "boolean"
  description: "When true, throws an error back indicating that principal resolution\n\
    has failed and no principal can be found based on the authentication requirements.\n\
    Otherwise, simply logs the condition as an error without raising a catastrophic\
    \ error."
  name: "cas.authn.jaas[].principal.principal-resolution-failure-fatal"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "boolean"
  description: "Return a null principal object if no attributes can be found for the\
    \ principal."
  name: "cas.authn.jaas[].principal.return-null"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "boolean"
  description: "Uses an existing principal id that may have already\nbeen established\
    \ in order to run person directory queries.\nThis is generally useful in situations\
    \ where\nauthentication is delegated to an external identity provider\nand a principal\
    \ is first established to then query an attribute source."
  name: "cas.authn.jaas[].principal.use-existing-principal-id"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties"
  type: "java.lang.String"
  description: "JAAS realm to use."
  name: "cas.authn.jaas[].realm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'.\nRelevant when the\
    \ type used is 'DEFAULT'."
  name: "cas.authn.jdbc.bind[].password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'.\nRelevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.jdbc.bind[].password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders.\nSecret usually is an optional setting."
  name: "cas.authn.jdbc.bind[].password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "int"
  description: "Strength or number of iterations to use for password hashing.\nUsually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders.\nUsed by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.jdbc.bind[].password-encoder.strength"
  defaultValue: "16"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use.\nType may be specified as\
    \ blank or 'NONE' to disable password encoding.\nIt may also refer to a fully-qualified\
    \ class name that implements\nthe Spring Security's {@code PasswordEncoder} interface\n\
    if you wish you define your own encoder.\n\nThe following types may be used:\n\
    <ul>\n    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\n\
    \    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest\n\
    \    algorithms via {@link #getCharacterEncoding()} and {@link #getCharacterEncoding()}.</li>\n\
    \    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength\
    \ provided and an optional secret.</li>\n    <li>{@code SCRYPT}: Use the {@code\
    \ SCryptPasswordEncoder}.</li>\n    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>\n    <li>{@code\
    \ STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>\n\
    \    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA\
    \ and SSHA (salted-SHA). The values\n    are base-64 encoded and have the label\
    \ {SHA} (or {SSHA}) prepended to the encoded hash.</li>\n    <li>{@code GLIBC_CRYPT}:\
    \ Use the {@code GlibcCryptPasswordEncoder} based on the\n    {@code encoding-algorithm},\
    \ strength provided and an optional secret.</li>\n    <li>{@code org.example.MyEncoder}:\
    \ An implementation of {@code PasswordEncoder} of your own choosing.</li>\n  \
    \  <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged\
    \ with handling password encoding operations.</li>\n</ul>"
  name: "cas.authn.jdbc.bind[].password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "CaseConversion"
  description: "Indicate whether the principal identifier should be transformed\n\
    into upper-case, lower-case, etc.\nAccepted values are {@code NONE, UPPERCASE,\
    \ LOWERCASE}."
  name: "cas.authn.jdbc.bind[].principal-transformation.case-conversion"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\n\
    for username extractions. On a successful match, the first matched group\nin the\
    \ pattern will be used as the extracted username."
  name: "cas.authn.jdbc.bind[].principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.jdbc.bind[].principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.jdbc.bind[].principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'.\nRelevant when the\
    \ type used is 'DEFAULT'."
  name: "cas.authn.jdbc.encode[].password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'.\nRelevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.jdbc.encode[].password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders.\nSecret usually is an optional setting."
  name: "cas.authn.jdbc.encode[].password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "int"
  description: "Strength or number of iterations to use for password hashing.\nUsually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders.\nUsed by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.jdbc.encode[].password-encoder.strength"
  defaultValue: "16"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use.\nType may be specified as\
    \ blank or 'NONE' to disable password encoding.\nIt may also refer to a fully-qualified\
    \ class name that implements\nthe Spring Security's {@code PasswordEncoder} interface\n\
    if you wish you define your own encoder.\n\nThe following types may be used:\n\
    <ul>\n    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\n\
    \    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest\n\
    \    algorithms via {@link #getCharacterEncoding()} and {@link #getCharacterEncoding()}.</li>\n\
    \    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength\
    \ provided and an optional secret.</li>\n    <li>{@code SCRYPT}: Use the {@code\
    \ SCryptPasswordEncoder}.</li>\n    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>\n    <li>{@code\
    \ STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>\n\
    \    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA\
    \ and SSHA (salted-SHA). The values\n    are base-64 encoded and have the label\
    \ {SHA} (or {SSHA}) prepended to the encoded hash.</li>\n    <li>{@code GLIBC_CRYPT}:\
    \ Use the {@code GlibcCryptPasswordEncoder} based on the\n    {@code encoding-algorithm},\
    \ strength provided and an optional secret.</li>\n    <li>{@code org.example.MyEncoder}:\
    \ An implementation of {@code PasswordEncoder} of your own choosing.</li>\n  \
    \  <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged\
    \ with handling password encoding operations.</li>\n</ul>"
  name: "cas.authn.jdbc.encode[].password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "CaseConversion"
  description: "Indicate whether the principal identifier should be transformed\n\
    into upper-case, lower-case, etc.\nAccepted values are {@code NONE, UPPERCASE,\
    \ LOWERCASE}."
  name: "cas.authn.jdbc.encode[].principal-transformation.case-conversion"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\n\
    for username extractions. On a successful match, the first matched group\nin the\
    \ pattern will be used as the extracted username."
  name: "cas.authn.jdbc.encode[].principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.jdbc.encode[].principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.jdbc.encode[].principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'.\nRelevant when the\
    \ type used is 'DEFAULT'."
  name: "cas.authn.jdbc.query[].password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'.\nRelevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.jdbc.query[].password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders.\nSecret usually is an optional setting."
  name: "cas.authn.jdbc.query[].password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "int"
  description: "Strength or number of iterations to use for password hashing.\nUsually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders.\nUsed by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.jdbc.query[].password-encoder.strength"
  defaultValue: "16"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use.\nType may be specified as\
    \ blank or 'NONE' to disable password encoding.\nIt may also refer to a fully-qualified\
    \ class name that implements\nthe Spring Security's {@code PasswordEncoder} interface\n\
    if you wish you define your own encoder.\n\nThe following types may be used:\n\
    <ul>\n    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\n\
    \    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest\n\
    \    algorithms via {@link #getCharacterEncoding()} and {@link #getCharacterEncoding()}.</li>\n\
    \    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength\
    \ provided and an optional secret.</li>\n    <li>{@code SCRYPT}: Use the {@code\
    \ SCryptPasswordEncoder}.</li>\n    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>\n    <li>{@code\
    \ STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>\n\
    \    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA\
    \ and SSHA (salted-SHA). The values\n    are base-64 encoded and have the label\
    \ {SHA} (or {SSHA}) prepended to the encoded hash.</li>\n    <li>{@code GLIBC_CRYPT}:\
    \ Use the {@code GlibcCryptPasswordEncoder} based on the\n    {@code encoding-algorithm},\
    \ strength provided and an optional secret.</li>\n    <li>{@code org.example.MyEncoder}:\
    \ An implementation of {@code PasswordEncoder} of your own choosing.</li>\n  \
    \  <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged\
    \ with handling password encoding operations.</li>\n</ul>"
  name: "cas.authn.jdbc.query[].password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "CaseConversion"
  description: "Indicate whether the principal identifier should be transformed\n\
    into upper-case, lower-case, etc.\nAccepted values are {@code NONE, UPPERCASE,\
    \ LOWERCASE}."
  name: "cas.authn.jdbc.query[].principal-transformation.case-conversion"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\n\
    for username extractions. On a successful match, the first matched group\nin the\
    \ pattern will be used as the extracted username."
  name: "cas.authn.jdbc.query[].principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.jdbc.query[].principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.jdbc.query[].principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'.\nRelevant when the\
    \ type used is 'DEFAULT'."
  name: "cas.authn.jdbc.search[].password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'.\nRelevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.jdbc.search[].password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders.\nSecret usually is an optional setting."
  name: "cas.authn.jdbc.search[].password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "int"
  description: "Strength or number of iterations to use for password hashing.\nUsually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders.\nUsed by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.jdbc.search[].password-encoder.strength"
  defaultValue: "16"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use.\nType may be specified as\
    \ blank or 'NONE' to disable password encoding.\nIt may also refer to a fully-qualified\
    \ class name that implements\nthe Spring Security's {@code PasswordEncoder} interface\n\
    if you wish you define your own encoder.\n\nThe following types may be used:\n\
    <ul>\n    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\n\
    \    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest\n\
    \    algorithms via {@link #getCharacterEncoding()} and {@link #getCharacterEncoding()}.</li>\n\
    \    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength\
    \ provided and an optional secret.</li>\n    <li>{@code SCRYPT}: Use the {@code\
    \ SCryptPasswordEncoder}.</li>\n    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>\n    <li>{@code\
    \ STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>\n\
    \    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA\
    \ and SSHA (salted-SHA). The values\n    are base-64 encoded and have the label\
    \ {SHA} (or {SSHA}) prepended to the encoded hash.</li>\n    <li>{@code GLIBC_CRYPT}:\
    \ Use the {@code GlibcCryptPasswordEncoder} based on the\n    {@code encoding-algorithm},\
    \ strength provided and an optional secret.</li>\n    <li>{@code org.example.MyEncoder}:\
    \ An implementation of {@code PasswordEncoder} of your own choosing.</li>\n  \
    \  <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged\
    \ with handling password encoding operations.</li>\n</ul>"
  name: "cas.authn.jdbc.search[].password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "CaseConversion"
  description: "Indicate whether the principal identifier should be transformed\n\
    into upper-case, lower-case, etc.\nAccepted values are {@code NONE, UPPERCASE,\
    \ LOWERCASE}."
  name: "cas.authn.jdbc.search[].principal-transformation.case-conversion"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\n\
    for username extractions. On a successful match, the first matched group\nin the\
    \ pattern will be used as the extracted username."
  name: "cas.authn.jdbc.search[].principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.jdbc.search[].principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.jdbc.search[].principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.json.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.json.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.json.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.json.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.json.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Boolean"
  description: "Indicates whether account state handling should be enabled to process\
    \ warnings or errors reported back from the authentication response, produced\
    \ by the source."
  name: "cas.authn.json.password-policy.account-state-handling-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Boolean"
  description: "Indicates if warning should be displayed, when the ldap attribute\
    \ value matches the {@link #warningAttributeValue}."
  name: "cas.authn.json.password-policy.display-warning-on-match"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Boolean"
  description: "Whether password policy should be enabled."
  name: "cas.authn.json.password-policy.enabled"
  defaultValue: true
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPasswordPolicyProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.json.password-policy.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Integer"
  description: "When dealing with FreeIPA, indicates the number of allows login failures."
  name: "cas.authn.json.password-policy.login-failures"
  defaultValue: 5
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.util.Map<java.lang.String,java.lang.Class<? extends javax.security.auth.login.LoginException>>"
  description: "Key-value structure (Map) that indicates a list of boolean attributes\
    \ as keys. If either attribute value is true, indicating an account state is flagged,\
    \ the corresponding error can be thrown. Example {@code accountLocked=javax.security.auth.login.AccountLockedException}"
  name: "cas.authn.json.password-policy.policy-attributes"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties$PasswordPolicyHandlingOptions"
  description: "Decide how authentication should handle password policy changes. Acceptable\
    \ values are: <ul> <li>{@code DEFAULT}: Default password policy rules handling\
    \ account states.</li> <li>{@code GROOVY}: Handle account changes and warnings\
    \ via Groovy scripts</li> <li>{@code REJECT_RESULT_CODE}: Handle account state\
    \ only if the authentication result code isn't blocked</li> </ul>DEFAULT:Default\
    \ option to handle policy changes..GROOVY:Handle account password policies via\
    \ Groovy..REJECT_RESULT_CODE:Strategy to only activate password policy\nif the\
    \ authentication response code is not blocked.."
  name: "cas.authn.json.password-policy.strategy"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Boolean"
  description: "Always display the password expiration warning regardless."
  name: "cas.authn.json.password-policy.warn-all"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.String"
  description: "Used by an account state handling policy that only calculates account\
    \ warnings in case the entry carries this attribute."
  name: "cas.authn.json.password-policy.warning-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.String"
  description: "Used by an account state handling policy that only calculates account\
    \ warnings in case the entry carries an attribute {@link #warningAttributeName}\
    \ whose value matches this field."
  name: "cas.authn.json.password-policy.warning-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordPolicyProperties"
  type: "java.lang.Integer"
  description: "This is used to calculate a warning period to see if account expiry\
    \ is within the calculated window."
  name: "cas.authn.json.password-policy.warning-days"
  defaultValue: 30
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.json.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.json.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.json.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.json.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.json.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties>"
  description: "Collection of settings related to LDAP authentication. These settings\
    \ are required to be indexed (i.e. ldap[0].xyz)."
  name: "cas.authn.ldap"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'.\nRelevant when the\
    \ type used is 'DEFAULT'."
  name: "cas.authn.ldap[].password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'.\nRelevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.ldap[].password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders.\nSecret usually is an optional setting."
  name: "cas.authn.ldap[].password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "int"
  description: "Strength or number of iterations to use for password hashing.\nUsually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders.\nUsed by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.ldap[].password-encoder.strength"
  defaultValue: "16"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use.\nType may be specified as\
    \ blank or 'NONE' to disable password encoding.\nIt may also refer to a fully-qualified\
    \ class name that implements\nthe Spring Security's {@code PasswordEncoder} interface\n\
    if you wish you define your own encoder.\n\nThe following types may be used:\n\
    <ul>\n    <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\n\
    \    <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For message-digest\n\
    \    algorithms via {@link #getCharacterEncoding()} and {@link #getCharacterEncoding()}.</li>\n\
    \    <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder} based on the strength\
    \ provided and an optional secret.</li>\n    <li>{@code SCRYPT}: Use the {@code\
    \ SCryptPasswordEncoder}.</li>\n    <li>{@code PBKDF2}: Use the {@code Pbkdf2PasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>\n    <li>{@code\
    \ STANDARD}: Use the {@code StandardPasswordEncoder} based on the secret provided.</li>\n\
    \    <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder} supports Ldap SHA\
    \ and SSHA (salted-SHA). The values\n    are base-64 encoded and have the label\
    \ {SHA} (or {SSHA}) prepended to the encoded hash.</li>\n    <li>{@code GLIBC_CRYPT}:\
    \ Use the {@code GlibcCryptPasswordEncoder} based on the\n    {@code encoding-algorithm},\
    \ strength provided and an optional secret.</li>\n    <li>{@code org.example.MyEncoder}:\
    \ An implementation of {@code PasswordEncoder} of your own choosing.</li>\n  \
    \  <li>{@code file:///path/to/script.groovy}: Path to a Groovy script charged\
    \ with handling password encoding operations.</li>\n</ul>"
  name: "cas.authn.ldap[].password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "CaseConversion"
  description: "Indicate whether the principal identifier should be transformed\n\
    into upper-case, lower-case, etc.\nAccepted values are {@code NONE, UPPERCASE,\
    \ LOWERCASE}."
  name: "cas.authn.ldap[].principal-transformation.case-conversion"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\n\
    for username extractions. On a successful match, the first matched group\nin the\
    \ pattern will be used as the extracted username."
  name: "cas.authn.ldap[].principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.ldap[].principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.ldap[].principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.acceptto.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.acceptto.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.acceptto.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.acceptto.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.acceptto.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.acceptto.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.acceptto.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.acceptto.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.acceptto.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.acceptto.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.acceptto.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.acceptto.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.acceptto.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.acceptto.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "Attribute returned in the final CAS validation payload that indicates\
    \ the authentication context class satisfied in the event of a multifactor authentication\
    \ attempt."
  name: "cas.authn.mfa.authentication-context-attribute"
  defaultValue: "authnContextClass"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.authy.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.authy.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.authy.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.authy.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.authy.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.authy.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.authy.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.authy.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.authy.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.authy.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.authy.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.authy.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.authy.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.authy.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "Content-type that is expected to be specified by non-web clients such\
    \ as curl, etc in the event that the provider supports variations of non-browser\
    \ based MFA. The value is treated as a regular expression."
  name: "cas.authn.mfa.content-type"
  defaultValue: "application/cas"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorProperties>"
  description: "Activate and configure a multifactor authentication provider via Duo\
    \ Security."
  name: "cas.authn.mfa.duo"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.duo[].bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.duo[].bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution.\nSpecifically, skip multifactor if the a particular authentication\
    \ handler noted by its name\nsuccessfully is able to authenticate credentials\
    \ in the primary factor."
  name: "cas.authn.mfa.duo[].bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution.\nSpecifically, skip multifactor if the authentication\
    \ method attribute collected as part of\nauthentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.duo[].bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\n\
    Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.duo[].bypass.credential-class-type"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names.\nHeader names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.duo[].bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host\nmatches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.duo[].bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.duo[].bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.duo[].bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.gauth.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.gauth.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.gauth.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.gauth.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.gauth.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.gauth.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.gauth.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.gauth.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.gauth.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.gauth.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.gauth.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.gauth.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.gauth.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.gauth.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "MFA can be triggered for all users/subjects whose authentication event/metadata\
    \ has resolved a specific attribute that matches one of the below conditions:\
    \ <ul> <li>Trigger MFA based on a authentication attribute(s) whose value(s) matches\
    \ a regex pattern. Note that this behavior is only applicable if there is only\
    \ a single MFA provider configured, since that would allow CAS to know what provider\
    \ to next activate. </li> <li>Trigger MFA based on a authentication attribute(s)\
    \ whose value(s) EXACTLY matches an MFA provider. This option is more relevant\
    \ if you have more than one provider configured or if you have the flexibility\
    \ of assigning provider ids to attributes as values. </li> </ul> Needless to say,\
    \ the attributes need to have been resolved for the authentication event prior\
    \ to this step. This trigger is generally useful when the underlying authentication\
    \ engine signals CAS to perform additional validation of credentials. This signal\
    \ may be captured by CAS as an attribute that is part of the authentication event\
    \ metadata which can then trigger additional multifactor authentication events."
  name: "cas.authn.mfa.global-authentication-attribute-name-triggers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "The regular expression that is cross matches against the authentication\
    \ attribute to determine if the account is qualified for multifactor authentication."
  name: "cas.authn.mfa.global-authentication-attribute-value-regex"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "Defines the global failure mode for the entire deployment. This is\
    \ meant to be used a shortcut to define the policy globally rather than per application.\
    \ Applications registered with CAS can still define a failure mode and override\
    \ the global."
  name: "cas.authn.mfa.global-failure-mode"
  defaultValue: "CLOSED"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "MFA can be triggered for all users/subjects carrying a specific attribute\
    \ that matches one of the conditions below. <ul> <li>Trigger MFA based on a principal\
    \ attribute(s) whose value(s) matches a regex pattern. Note that this behavior\
    \ is only applicable if there is only a single MFA provider configured, since\
    \ that would allow CAS to know what provider to next activate.</li> <li>Trigger\
    \ MFA based on a principal attribute(s) whose value(s) EXACTLY matches an MFA\
    \ provider. This option is more relevant if you have more than one provider configured\
    \ or if you have the flexibility of assigning provider ids to attributes as values.</li>\
    \ </ul> Needless to say, the attributes need to have been resolved for the principal\
    \ prior to this step."
  name: "cas.authn.mfa.global-principal-attribute-name-triggers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "org.springframework.core.io.Resource"
  description: "This is a more generic variant of the {@link #globalPrincipalAttributeNameTriggers}.\
    \ It may be useful in cases where there is more than one provider configured and\
    \ available in the application runtime and you need to design a strategy to dynamically\
    \ decide on the provider that should be activated for the request. The decision\
    \ is handed off to a Predicate implementation that define in a Groovy script whose\
    \ location is taught to CAS."
  name: "cas.authn.mfa.global-principal-attribute-predicate"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "The regular expression that is cross matches against the principal\
    \ attribute to determine if the account is qualified for multifactor authentication."
  name: "cas.authn.mfa.global-principal-attribute-value-regex"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "MFA can be triggered for all applications and users regardless of\
    \ individual settings. This setting holds the value of an MFA provider that shall\
    \ be activated for all requests, regardless."
  name: "cas.authn.mfa.global-provider-id"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "org.springframework.core.io.Resource"
  description: "MFA can be triggered based on the results of a groovy script of your\
    \ own design. The outcome of the script should determine the MFA provider id that\
    \ CAS should attempt to activate."
  name: "cas.authn.mfa.groovy-script"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "MFA can be triggered by Grouper groups to which the authenticated\
    \ principal is assigned. Groups are collected by CAS and then cross-checked against\
    \ all available/configured MFA providers. The group’s comparing factor MUST be\
    \ defined in CAS to activate this behavior and it can be based on the group’s\
    \ name, display name, etc where a successful match against a provider id shall\
    \ activate the chosen MFA provider."
  name: "cas.authn.mfa.grouper-group-field"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.inwebo.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.inwebo.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.inwebo.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.inwebo.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.inwebo.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.inwebo.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.inwebo.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.inwebo.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.inwebo.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.inwebo.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.inwebo.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.inwebo.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.inwebo.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.inwebo.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.Boolean"
  description: "In the event that multiple multifactor authentication providers are\
    \ determined for a multifactor authentication transaction, this setting will allow\
    \ one to interactively choose a provider out of the list of available providers.\
    \ A trigger may be designed to support more than one provider, and rather than\
    \ letting CAS auto-determine the selected provider via scripts or ranking strategies,\
    \ this method puts the choice back onto the user to decide which provider makes\
    \ the most sense at any given time."
  name: "cas.authn.mfa.provider-selection-enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "org.springframework.core.io.Resource"
  description: "In the event that multiple multifactor authentication providers are\
    \ determined for a multifactor authentication transaction, by default CAS will\
    \ attempt to sort the collection of providers based on their rank and will pick\
    \ one with the highest priority. This use case may arise if multiple triggers\
    \ are defined where each decides on a different multifactor authentication provider,\
    \ or the same provider instance is configured multiple times with many instances.\
    \ Provider selection may also be carried out using Groovy scripting strategies\
    \ more dynamically. The following example should serve as an outline of how to\
    \ select multifactor providers based on a Groovy script."
  name: "cas.authn.mfa.provider-selector-groovy-script"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.radius.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.radius.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.radius.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.radius.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.radius.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.radius.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.radius.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.radius.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.radius.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.radius.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.radius.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.radius.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.radius.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.radius.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "MFA can be triggered for a specific authentication request, provided\
    \ the initial request to the CAS /login endpoint contains a request header that\
    \ indicates the required MFA authentication flow. The header name is configurable,\
    \ but its value must match the authentication provider id of an available MFA\
    \ provider."
  name: "cas.authn.mfa.request-header"
  defaultValue: "authn_method"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "MFA can be triggered for a specific authentication request, provided\
    \ the initial request to the CAS /login endpoint contains a parameter that indicates\
    \ the required MFA authentication flow. The parameter name is configurable, but\
    \ its value must match the authentication provider id of an available MFA provider."
  name: "cas.authn.mfa.request-parameter"
  defaultValue: "authn_method"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties"
  type: "java.lang.String"
  description: "MFA can be triggered for a specific authentication request, provided\
    \ the  request  contains a session/request attribute that indicates the required\
    \ MFA authentication flow. The attribute name is configurable, but its value must\
    \ match the authentication provider id of an available MFA provider."
  name: "cas.authn.mfa.session-attribute"
  defaultValue: "authn_method"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.simple.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.simple.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.simple.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.simple.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.simple.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.simple.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.simple.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.simple.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.simple.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.simple.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.simple.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.simple.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.simple.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.simple.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.swivel.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.swivel.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.swivel.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.swivel.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.swivel.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.swivel.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.swivel.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.swivel.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.swivel.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.swivel.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.swivel.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.swivel.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.swivel.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.swivel.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.u2f.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.u2f.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.u2f.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.u2f.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.u2f.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.u2f.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.u2f.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.u2f.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.u2f.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.u2f.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.u2f.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.u2f.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.u2f.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.u2f.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.web-authn.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.web-authn.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.web-authn.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.web-authn.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.web-authn.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.web-authn.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.web-authn.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.web-authn.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.web-authn.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.web-authn.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.web-authn.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.web-authn.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.web-authn.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.web-authn.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated authentication\
    \ attribute names."
  name: "cas.authn.mfa.yubikey.bypass.authentication-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated authentication\
    \ attribute values."
  name: "cas.authn.mfa.yubikey.bypass.authentication-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary authentication\
    \ execution. Specifically, skip multifactor if the a particular authentication\
    \ handler noted by its name successfully is able to authenticate credentials in\
    \ the primary factor."
  name: "cas.authn.mfa.yubikey.bypass.authentication-handler-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on method/form of primary\
    \ authentication execution. Specifically, skip multifactor if the authentication\
    \ method attribute collected as part of authentication metadata matches a certain\
    \ value."
  name: "cas.authn.mfa.yubikey.bypass.authentication-method-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication depending on form of primary credentials.\
    \ Value must equal the fully qualified class name of the credential type."
  name: "cas.authn.mfa.yubikey.bypass.credential-class-type"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.GroovyMultifactorAuthenticationProviderBypassProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mfa.yubikey.bypass.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request contains the defined\
    \ header names. Header names may be comma-separated and can be regular expressions;\
    \ values are ignored."
  name: "cas.authn.mfa.yubikey.bypass.http-request-headers"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication if the http request's remote address\
    \ or host matches the value defined here. The value may be specified as a regular\
    \ expression."
  name: "cas.authn.mfa.yubikey.bypass.http-request-remote-address"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Skip multifactor authentication based on designated principal attribute\
    \ names."
  name: "cas.authn.mfa.yubikey.bypass.principal-attribute-name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "Optionally, skip multifactor authentication based on designated principal\
    \ attribute values."
  name: "cas.authn.mfa.yubikey.bypass.principal-attribute-value"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ password for authentication."
  name: "cas.authn.mfa.yubikey.bypass.rest.basic-auth-password"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "If REST endpoint is protected via basic authentication, specify the\
    \ username for authentication."
  name: "cas.authn.mfa.yubikey.bypass.rest.basic-auth-username"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "HTTP method to use when contacting the rest endpoint. Examples include\
    \ {@code GET, POST}, etc."
  name: "cas.authn.mfa.yubikey.bypass.rest.method"
  defaultValue: "GET"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.mfa.RestfulMultifactorAuthenticationProviderBypassProperties"
  type: "java.lang.String"
  description: "The endpoint URL to contact and retrieve attributes."
  name: "cas.authn.mfa.yubikey.bypass.rest.url"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.mongo.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.mongo.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.mongo.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.mongo.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.mongo.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.mongo.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.mongo.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.mongo.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.mongo.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.mongo.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.okta.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.okta.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.okta.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.okta.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.okta.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.okta.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.okta.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.okta.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.okta.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.okta.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Activated attribute repository identifiers that should be used for\
    \ fetching attributes if attribute resolution is enabled. The list here may include\
    \ identifiers separated by comma."
  name: "cas.authn.openid.principal.active-attribute-repository-ids"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Whether attribute repositories should be contacted to fetch person\
    \ attributes."
  name: "cas.authn.openid.principal.attribute-resolution-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Attribute name to use to indicate the identifier of the principal\
    \ constructed. If the attribute is blank or has no values, the default principal\
    \ id will be used determined by the underlying authentication engine. The principal\
    \ id attribute usually is removed from the collection of attributes collected,\
    \ though this behavior depends on the schematics of the underlying authentication\
    \ strategy."
  name: "cas.authn.openid.principal.principal-attribute"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "When true, throws an error back indicating that principal resolution\
    \ has failed and no principal can be found based on the authentication requirements.\
    \ Otherwise, simply logs the condition as an error without raising a catastrophic\
    \ error."
  name: "cas.authn.openid.principal.principal-resolution-failure-fatal"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Return a null principal object if no attributes can be found for the\
    \ principal."
  name: "cas.authn.openid.principal.return-null"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Uses an existing principal id that may have already been established\
    \ in order to run person directory queries. This is generally useful in situations\
    \ where authentication is delegated to an external identity provider and a principal\
    \ is first established to then query an attribute source."
  name: "cas.authn.openid.principal.use-existing-principal-id"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.passwordsync.PasswordSynchronizationProperties"
  type: "java.lang.Boolean"
  description: "Allow password synchronization to be turned off globally."
  name: "cas.authn.password-sync.enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.passwordsync.PasswordSynchronizationProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.passwordsync.LdapPasswordSynchronizationProperties>"
  description: "Options for password sync via LDAP."
  name: "cas.authn.password-sync.ldap"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.pm.jdbc.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.pm.jdbc.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.pm.jdbc.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.pm.jdbc.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.pm.jdbc.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AllHandlers"
  type: "java.lang.Boolean"
  description: "Enables the policy."
  name: "cas.authn.policy.all-handlers.enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AllHandlers"
  type: "java.lang.String"
  description: "The name of the authentication policy."
  name: "cas.authn.policy.all-handlers.name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AllCredentials"
  type: "java.lang.Boolean"
  description: "Enables the policy."
  name: "cas.authn.policy.all.enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AllCredentials"
  type: "java.lang.String"
  description: "The name of the authentication policy."
  name: "cas.authn.policy.all.name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AnyCredential"
  type: "java.lang.Boolean"
  description: "Enables the policy."
  name: "cas.authn.policy.any.enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AnyCredential"
  type: "java.lang.String"
  description: "The name of the authentication policy."
  name: "cas.authn.policy.any.name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.AnyCredential"
  type: "java.lang.Boolean"
  description: "Avoid short circuiting and try every handler even if one prior succeeded.\
    \ Ensure number of provided credentials does not match the sum of authentication\
    \ successes and failures"
  name: "cas.authn.policy.any.try-all"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationPolicyProperties>"
  description: "Execute a groovy script to detect authentication policy."
  name: "cas.authn.policy.groovy"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyAuthenticationPolicyProperties"
  type: "java.lang.String"
  description: "Path to the groovy script to execute."
  name: "cas.authn.policy.groovy[].script"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.NotPrevented"
  type: "java.lang.Boolean"
  description: "Enables the policy."
  name: "cas.authn.policy.not-prevented.enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.NotPrevented"
  type: "java.lang.String"
  description: "The name of the authentication policy."
  name: "cas.authn.policy.not-prevented.name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.RequiredAuthenticationHandler"
  type: "java.lang.Boolean"
  description: "Enables the policy."
  name: "cas.authn.policy.req.enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.RequiredAuthenticationHandler"
  type: "java.lang.String"
  description: "The handler name which must have successfully executed and validated\
    \ credentials."
  name: "cas.authn.policy.req.handler-name"
  defaultValue: "handlerName"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.RequiredAuthenticationHandler"
  type: "java.lang.String"
  description: "The name of the authentication policy."
  name: "cas.authn.policy.req.name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.RequiredAuthenticationHandler"
  type: "java.lang.Boolean"
  description: "Ensure number of provided credentials does not match the sum of authentication\
    \ successes and failures."
  name: "cas.authn.policy.req.try-all"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties"
  type: "java.lang.Boolean"
  description: "Global authentication policy that is applied when CAS attempts to\
    \ vend and validate tickets. Checks to make sure a particular authentication handler\
    \ has successfully executed and validated credentials. Required handlers are defined\
    \ per registered service."
  name: "cas.authn.policy.required-handler-authentication-policy-enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.core.authentication.RestAuthenticationPolicyProperties>"
  description: "Execute a rest endpoint to detect authentication policy."
  name: "cas.authn.policy.rest"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties"
  type: "java.lang.Boolean"
  description: "If true, allows CAS to select authentication handlers based on the\
    \ credential source. This allows the authentication engine to restrict the task\
    \ of validating credentials to the selected source or account repository, as opposed\
    \ to every authentication handler registered with CAS at runtime."
  name: "cas.authn.policy.source-selection-enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.UniquePrincipal"
  type: "java.lang.Boolean"
  description: "Enables the policy."
  name: "cas.authn.policy.unique-principal.enabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationPolicyProperties.UniquePrincipal"
  type: "java.lang.String"
  description: "The name of the authentication policy."
  name: "cas.authn.policy.unique-principal.name"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.radius.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.radius.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.radius.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.radius.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.radius.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.radius.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.radius.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.radius.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.radius.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.radius.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.redis.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.redis.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.redis.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.redis.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.redis.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.redis.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.redis.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.redis.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.redis.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.redis.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.reject.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.reject.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.reject.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.reject.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.reject.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.reject.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.reject.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.reject.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.reject.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.reject.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.rest.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.rest.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.rest.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.rest.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.rest.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.shiro.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.shiro.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.shiro.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.shiro.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.shiro.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.shiro.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.shiro.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.shiro.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.shiro.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.shiro.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.soap.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.soap.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.soap.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.soap.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.soap.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.soap.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.soap.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.soap.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.soap.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.soap.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.spnego.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.spnego.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.spnego.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.spnego.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.spnego.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Activated attribute repository identifiers that should be used for\
    \ fetching attributes if attribute resolution is enabled. The list here may include\
    \ identifiers separated by comma."
  name: "cas.authn.spnego.principal.active-attribute-repository-ids"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Whether attribute repositories should be contacted to fetch person\
    \ attributes."
  name: "cas.authn.spnego.principal.attribute-resolution-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Attribute name to use to indicate the identifier of the principal\
    \ constructed. If the attribute is blank or has no values, the default principal\
    \ id will be used determined by the underlying authentication engine. The principal\
    \ id attribute usually is removed from the collection of attributes collected,\
    \ though this behavior depends on the schematics of the underlying authentication\
    \ strategy."
  name: "cas.authn.spnego.principal.principal-attribute"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "When true, throws an error back indicating that principal resolution\
    \ has failed and no principal can be found based on the authentication requirements.\
    \ Otherwise, simply logs the condition as an error without raising a catastrophic\
    \ error."
  name: "cas.authn.spnego.principal.principal-resolution-failure-fatal"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Return a null principal object if no attributes can be found for the\
    \ principal."
  name: "cas.authn.spnego.principal.return-null"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Uses an existing principal id that may have already been established\
    \ in order to run person directory queries. This is generally useful in situations\
    \ where authentication is delegated to an external identity provider and a principal\
    \ is first established to then query an attribute source."
  name: "cas.authn.spnego.principal.use-existing-principal-id"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Activated attribute repository identifiers that should be used for\
    \ fetching attributes if attribute resolution is enabled. The list here may include\
    \ identifiers separated by comma."
  name: "cas.authn.surrogate.principal.active-attribute-repository-ids"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Whether attribute repositories should be contacted to fetch person\
    \ attributes."
  name: "cas.authn.surrogate.principal.attribute-resolution-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Attribute name to use to indicate the identifier of the principal\
    \ constructed. If the attribute is blank or has no values, the default principal\
    \ id will be used determined by the underlying authentication engine. The principal\
    \ id attribute usually is removed from the collection of attributes collected,\
    \ though this behavior depends on the schematics of the underlying authentication\
    \ strategy."
  name: "cas.authn.surrogate.principal.principal-attribute"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "When true, throws an error back indicating that principal resolution\
    \ has failed and no principal can be found based on the authentication requirements.\
    \ Otherwise, simply logs the condition as an error without raising a catastrophic\
    \ error."
  name: "cas.authn.surrogate.principal.principal-resolution-failure-fatal"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Return a null principal object if no attributes can be found for the\
    \ principal."
  name: "cas.authn.surrogate.principal.return-null"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Uses an existing principal id that may have already been established\
    \ in order to run person directory queries. This is generally useful in situations\
    \ where authentication is delegated to an external identity provider and a principal\
    \ is first established to then query an attribute source."
  name: "cas.authn.surrogate.principal.use-existing-principal-id"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.authn.syncope.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.authn.syncope.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.authn.syncope.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.authn.syncope.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.authn.syncope.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.syncope.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.syncope.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.syncope.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.syncope.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.syncope.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.token.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.token.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.token.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.token.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.token.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties"
  type: "java.util.List<org.apereo.cas.configuration.model.support.wsfed.WsFederationDelegationProperties>"
  description: "Collection of settings related to WsFed delegated authentication.\
    \ These settings are required to be indexed (i.e. wsfed[0].xyz)."
  name: "cas.authn.wsfed"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Activated attribute repository identifiers\nthat should be used for\
    \ fetching attributes\nif attribute resolution is enabled.\nThe list here may\
    \ include identifiers separated by comma."
  name: "cas.authn.wsfed[].principal.active-attribute-repository-ids"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "boolean"
  description: "Whether attribute repositories should be contacted\nto fetch person\
    \ attributes."
  name: "cas.authn.wsfed[].principal.attribute-resolution-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Attribute name to use to indicate the identifier of the principal\
    \ constructed.\nIf the attribute is blank or has no values, the default principal\
    \ id will be used\ndetermined by the underlying authentication engine. The principal\
    \ id attribute\nusually is removed from the collection of attributes collected,\
    \ though this behavior\ndepends on the schematics of the underlying authentication\
    \ strategy."
  name: "cas.authn.wsfed[].principal.principal-attribute"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "boolean"
  description: "When true, throws an error back indicating that principal resolution\n\
    has failed and no principal can be found based on the authentication requirements.\n\
    Otherwise, simply logs the condition as an error without raising a catastrophic\
    \ error."
  name: "cas.authn.wsfed[].principal.principal-resolution-failure-fatal"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "boolean"
  description: "Return a null principal object if no attributes can be found for the\
    \ principal."
  name: "cas.authn.wsfed[].principal.return-null"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "boolean"
  description: "Uses an existing principal id that may have already\nbeen established\
    \ in order to run person directory queries.\nThis is generally useful in situations\
    \ where\nauthentication is delegated to an external identity provider\nand a principal\
    \ is first established to then query an attribute source."
  name: "cas.authn.wsfed[].principal.use-existing-principal-id"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties$CaseConversion"
  description: "Indicate whether the principal identifier should be transformed into\
    \ upper-case, lower-case, etc. Accepted values are {@code NONE, UPPERCASE, LOWERCASE}.NONE:No\
    \ conversion..LOWERCASE:Lowercase conversion..UPPERCASE:Uppercase conversion.."
  name: "cas.authn.x509.principal-transformation.case-conversion"
  defaultValue: ""
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.GroovyPrincipalTransformationProperties"
  type: "org.springframework.core.io.Resource"
  description: "The location of the resource. Resources can be URLS, or files found\
    \ either on the classpath or outside somewhere in the file system."
  name: "cas.authn.x509.principal-transformation.groovy.location"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "A regular expression that will be used against the provided username\
    \ for username extractions. On a successful match, the first matched group in\
    \ the pattern will be used as the extracted username."
  name: "cas.authn.x509.principal-transformation.pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Prefix to add to the principal id prior to authentication."
  name: "cas.authn.x509.principal-transformation.prefix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PrincipalTransformationProperties"
  type: "java.lang.String"
  description: "Suffix to add to the principal id prior to authentication."
  name: "cas.authn.x509.principal-transformation.suffix"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Activated attribute repository identifiers that should be used for\
    \ fetching attributes if attribute resolution is enabled. The list here may include\
    \ identifiers separated by comma."
  name: "cas.authn.x509.principal.active-attribute-repository-ids"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Whether attribute repositories should be contacted to fetch person\
    \ attributes."
  name: "cas.authn.x509.principal.attribute-resolution-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Attribute name to use to indicate the identifier of the principal\
    \ constructed. If the attribute is blank or has no values, the default principal\
    \ id will be used determined by the underlying authentication engine. The principal\
    \ id attribute usually is removed from the collection of attributes collected,\
    \ though this behavior depends on the schematics of the underlying authentication\
    \ strategy."
  name: "cas.authn.x509.principal.principal-attribute"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "When true, throws an error back indicating that principal resolution\
    \ has failed and no principal can be found based on the authentication requirements.\
    \ Otherwise, simply logs the condition as an error without raising a catastrophic\
    \ error."
  name: "cas.authn.x509.principal.principal-resolution-failure-fatal"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Return a null principal object if no attributes can be found for the\
    \ principal."
  name: "cas.authn.x509.principal.return-null"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Uses an existing principal id that may have already been established\
    \ in order to run person directory queries. This is generally useful in situations\
    \ where authentication is delegated to an external identity provider and a principal\
    \ is first established to then query an attribute source."
  name: "cas.authn.x509.principal.use-existing-principal-id"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.support.clearpass.ClearpassProperties"
  type: "java.lang.Boolean"
  description: "Enable clearpass and allow CAS to cache credentials."
  name: "cas.clearpass.cache-credential"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.Boolean"
  description: "Whether CAS should accept local logout URLs. For example http(s)://localhost/logout"
  name: "cas.http-client.allow-local-logout-urls"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.String"
  description: "Indicates timeout for async operations."
  name: "cas.http-client.async-timeout"
  defaultValue: "PT5S"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.String"
  description: "If specified the regular expression will be used to validate the url's\
    \ authority."
  name: "cas.http-client.authority-validation-reg-ex"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.Boolean"
  description: "Whether the regular expression specified with {@code authorityValidationRegEx}\
    \ should be handled as case-sensitive ({@code true}) or case-insensitive ({@code\
    \ false}). If no {@code authorityValidationRegEx} is set, this value does not\
    \ have any effect."
  name: "cas.http-client.authority-validation-reg-ex-case-sensitive"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.String"
  description: "Connection timeout for all operations that reach out to URL endpoints."
  name: "cas.http-client.connection-timeout"
  defaultValue: "PT5S"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.String"
  description: "Enable hostname verification when attempting to contact URL endpoints.\
    \ May also be set to {@code none} to disable verification."
  name: "cas.http-client.host-name-verifier"
  defaultValue: "default"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.String"
  description: "Send requests via a proxy; define the hostname."
  name: "cas.http-client.proxy-host"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.Integer"
  description: "Send requests via a proxy; define the proxy port. Negative/zero values\
    \ should deactivate the proxy configuration for the http client."
  name: "cas.http-client.proxy-port"
  defaultValue: 0
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientProperties"
  type: "java.lang.String"
  description: "Read timeout for all operations that reach out to URL endpoints."
  name: "cas.http-client.read-timeout"
  defaultValue: "PT5S"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientTrustStoreProperties"
  type: "org.springframework.core.io.Resource"
  description: "The CAS local truststore resource to contain certificates to the CAS\
    \ deployment. In the event that local certificates are to be imported into the\
    \ CAS running environment, a local truststore is provided by CAS to improve portability\
    \ of configuration across environments."
  name: "cas.http-client.truststore.file"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientTrustStoreProperties"
  type: "java.lang.String"
  description: "The truststore password."
  name: "cas.http-client.truststore.psw"
  defaultValue: "changeit"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.HttpClientTrustStoreProperties"
  type: "java.lang.String"
  description: "Truststore type used to create a SSL context for http client."
  name: "cas.http-client.truststore.type"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'UTF-8'. Relevant when the type\
    \ used is 'DEFAULT'."
  name: "cas.monitor.endpoints.jdbc.password-encoder.character-encoding"
  defaultValue: "UTF-8"
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "The encoding algorithm to use such as 'MD5'. Relevant when the type\
    \ used is 'DEFAULT' or 'GLIBC_CRYPT'."
  name: "cas.monitor.endpoints.jdbc.password-encoder.encoding-algorithm"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Secret to use with STANDARD, PBKDF2, BCRYPT, GLIBC_CRYPT password\
    \ encoders. Secret usually is an optional setting."
  name: "cas.monitor.endpoints.jdbc.password-encoder.secret"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.Integer"
  description: "Strength or number of iterations to use for password hashing. Usually\
    \ relevant when dealing with PBKDF2 or BCRYPT encoders. Used by GLIBC_CRYPT encoders\
    \ as well."
  name: "cas.monitor.endpoints.jdbc.password-encoder.strength"
  defaultValue: 16
- required: true
  module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PasswordEncoderProperties"
  type: "java.lang.String"
  description: "Define the password encoder type to use. Type may be specified as\
    \ blank or 'NONE' to disable password encoding. It may also refer to a fully-qualified\
    \ class name that implements the Spring Security's {@code PasswordEncoder} interface\
    \ if you wish you define your own encoder. The following types may be used: <ul>\
    \     <li>{@code NONE}: No password encoding (i.e. plain-text) takes place.</li>\
    \     <li>{@code DEFAULT}: Use the {@code DefaultPasswordEncoder} of CAS. For\
    \ message-digest     algorithms via {@link #getCharacterEncoding()} and {@link\
    \ #getCharacterEncoding()}.</li>     <li>{@code BCRYPT}: Use the {@code BCryptPasswordEncoder}\
    \ based on the strength provided and an optional secret.</li>     <li>{@code SCRYPT}:\
    \ Use the {@code SCryptPasswordEncoder}.</li>     <li>{@code PBKDF2}: Use the\
    \ {@code Pbkdf2PasswordEncoder} based on the strength provided and an optional\
    \ secret.</li>     <li>{@code STANDARD}: Use the {@code StandardPasswordEncoder}\
    \ based on the secret provided.</li>     <li>{@code SSHA}: Use the {@code LdapShaPasswordEncoder}\
    \ supports Ldap SHA and SSHA (salted-SHA). The values     are base-64 encoded\
    \ and have the label {SHA} (or {SSHA}) prepended to the encoded hash.</li>   \
    \  <li>{@code GLIBC_CRYPT}: Use the {@code GlibcCryptPasswordEncoder} based on\
    \ the     {@code encoding-algorithm}, strength provided and an optional secret.</li>\
    \     <li>{@code org.example.MyEncoder}: An implementation of {@code PasswordEncoder}\
    \ of your own choosing.</li>     <li>{@code file:///path/to/script.groovy}: Path\
    \ to a Groovy script charged with handling password encoding operations.</li>\
    \ </ul> @see PasswordEncoderTypes"
  name: "cas.monitor.endpoints.jdbc.password-encoder.type"
  defaultValue: "NONE"
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Activated attribute repository identifiers that should be used for\
    \ fetching attributes if attribute resolution is enabled. The list here may include\
    \ identifiers separated by comma."
  name: "cas.person-directory.active-attribute-repository-ids"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Whether attribute repositories should be contacted to fetch person\
    \ attributes."
  name: "cas.person-directory.attribute-resolution-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.String"
  description: "Attribute name to use to indicate the identifier of the principal\
    \ constructed. If the attribute is blank or has no values, the default principal\
    \ id will be used determined by the underlying authentication engine. The principal\
    \ id attribute usually is removed from the collection of attributes collected,\
    \ though this behavior depends on the schematics of the underlying authentication\
    \ strategy."
  name: "cas.person-directory.principal-attribute"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "When true, throws an error back indicating that principal resolution\
    \ has failed and no principal can be found based on the authentication requirements.\
    \ Otherwise, simply logs the condition as an error without raising a catastrophic\
    \ error."
  name: "cas.person-directory.principal-resolution-failure-fatal"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Return a null principal object if no attributes can be found for the\
    \ principal."
  name: "cas.person-directory.return-null"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.authentication.PersonDirectoryPrincipalResolverProperties"
  type: "java.lang.Boolean"
  description: "Uses an existing principal id that may have already been established\
    \ in order to run person directory queries. This is generally useful in situations\
    \ where authentication is delegated to an external identity provider and a principal\
    \ is first established to then query an attribute source."
  name: "cas.person-directory.use-existing-principal-id"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.slo.SingleLogOutProperties"
  type: "java.lang.Boolean"
  description: "Whether SLO callbacks should be done in an asynchronous manner via\
    \ the HTTP client. When true, CAS will not wait for the operation to fully complete\
    \ and will resume control to carry on."
  name: "cas.slo.asynchronous"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.slo.SingleLogOutProperties"
  type: "java.lang.Boolean"
  description: "Whether SLO should be entirely disabled globally for the CAS deployment."
  name: "cas.slo.disabled"
  defaultValue: false
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties"
  type: "java.lang.Boolean"
  description: "Flag that indicates whether to allow SSO session with a missing target\
    \ service."
  name: "cas.sso.allow-missing-service-parameter"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties"
  type: "java.lang.Boolean"
  description: "Flag that indicates whether to create SSO session on re-newed authentication\
    \ event."
  name: "cas.sso.create-sso-cookie-on-renew-authn"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties"
  type: "java.lang.Boolean"
  description: "Indicates whether CAS proxy authentication/tickets are supported by\
    \ this server implementation."
  name: "cas.sso.proxy-authn-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties"
  type: "java.lang.Boolean"
  description: "Indicates whether this server implementation should globally support\
    \ CAS protocol authentication requests that are tagged with \"renew=true\"."
  name: "cas.sso.renew-authn-enabled"
  defaultValue: true
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties"
  type: "java.lang.String"
  description: "A regular expression pattern that represents an application which\
    \ must have established a session with CAS already before access to other applications\
    \ can be allowed by CAS. This is the initial mandatory/required application with\
    \ which the user must start before going anywhere else. Services that establish\
    \ a session with CAS typically do so by receiving a service ticket from CAS."
  name: "cas.sso.required-service-pattern"
  defaultValue: ""
- module: "cas-server-core-authentication"
  owner: "org.apereo.cas.configuration.model.core.sso.SingleSignOnProperties"
  type: "java.lang.Boolean"
  description: "Indicate whether single sign-on should be turned on and supported\
    \ globally for the server."
  name: "cas.sso.sso-enabled"
  defaultValue: true
