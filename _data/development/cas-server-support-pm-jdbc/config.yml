---
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.Boolean"
  description: "The default auto-commit behavior of connections in the pool. Determined\
    \ whether queries such as update/insert should be immediately executed without\
    \ waiting for an underlying transaction."
  shortDescription: "The default auto-commit behavior of connections in the pool."
  name: "cas.authn.pm.jdbc.autocommit"
  defaultValue: false
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.Integer"
  description: "A non-zero value enables use of JDBC2 batch updates by Hibernate.\
    \ e.g. recommended values between 5 and 30."
  shortDescription: "A non-zero value enables use of JDBC2 batch updates by Hibernate.\
    \ e.g. recommended values between 5 and 30."
  name: "cas.authn.pm.jdbc.batch-size"
  defaultValue: 5
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "Attempts to do a JNDI data source look up for the data source name\
    \ specified. Will attempt to locate the data source object as is, or will try\
    \ to return a proxy instance of it, in the event that {@link #dataSourceProxy}\
    \ is used."
  shortDescription: "Attempts to do a JNDI data source look up for the data source\
    \ name specified."
  name: "cas.authn.pm.jdbc.data-source-name"
  defaultValue: ""
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.Boolean"
  description: "Indicates whether JNDI data sources retrieved should be proxied or\
    \ returned back verbatim. When using a container configured data source, many\
    \ of the pool related parameters will not be used. If this setting is specified\
    \ but the JNDI lookup fails, a data source will be created with the configured\
    \ (or default) CAS pool parameters. If you experience classloading errors while\
    \ trying to use a container datasource, you can try setting this setting to {@code\
    \ true} which will wrap the container datasource in a way that may resolve the\
    \ error. This property can be either a JNDI name for the datasource or a resource\
    \ name prefixed with {@code java:/comp/env/}. If it is a resource name then you\
    \ need an entry in a {@code web.xml}. It should contain an entry like this: <pre>\
    \ {@code <resource-ref>    <res-ref-name>jdbc/casDataSource</res-ref-name>   \
    \ <res-type>javax.sql.DataSource</res-type>    <res-auth>Container</res-auth>\
    \ </resource-ref> } </pre> In Apache Tomcat, a container datasource can be defined\
    \ like this in the {@code context.xml}: <pre> {@code <Resource name=\"jdbc/casDataSource\"\
    \           auth=\"Container\"           type=\"javax.sql.DataSource\"       \
    \    driverClassName=\"org.postgresql.Driver\"           url=\"jdbc:postgresql://casdb.example.com:5432/xyz_db\"\
    \           username=\"cas\"           password=\"xyz\"           testWhileIdle=\"\
    true\"           testOnBorrow=\"true\"           testOnReturn=\"false\"      \
    \     validationQuery=\"select 1\"           validationInterval=\"30000\"    \
    \       timeBetweenEvictionRunsMillis=\"30000\"           factory=\"org.apache.tomcat.jdbc.pool.DataSourceFactory\"\
    \           minIdle=\"0\"           maxIdle=\"5\"           initialSize=\"0\"\
    \           maxActive=\"20\"           maxWait=\"10000\" /> } </pre> In Jetty,\
    \ a pool can be put in JNDI with a {@code jetty.xml} or {@code jetty-env.xml}\
    \ file like this:  <pre> {@code <?xml version=\"1.0\"?> <!DOCTYPE Configure PUBLIC\
    \ \"-//Jetty//Configure//EN\" \"http://www.eclipse.org/jetty/configure_9_4.dtd\"\
    > <Configure class=\"org.eclipse.jetty.webapp.WebAppContext\">     <New id=\"\
    datasource.cas\" class=\"org.eclipse.jetty.plus.jndi.Resource\">         <Arg></Arg>\
    \ <!-- empty scope arg is JVM scope -->         <Arg>jdbc/casDataSource</Arg>\
    \ <!-- name that matches resource in web.xml-->         <Arg>             <New\
    \ class=\"org.apache.commons.dbcp.BasicDataSource\">                 <Set name=\"\
    driverClassName\">oracle.jdbc.OracleDriver</Set>                 <Set name=\"\
    url\">jdbc:oracle:thin:@//casdb.example.com:1521/ntrs\"</Set>                \
    \ <Set name=\"username\">cas</Set>                 <Set name=\"password\">xyz</Set>\
    \                 <Set name=\"validationQuery\">select dummy from dual</Set> \
    \                <Set name=\"testOnBorrow\">true</Set>                 <Set name=\"\
    testOnReturn\">false</Set>                 <Set name=\"testWhileIdle\">false</Set>\
    \                 <Set name=\"defaultAutoCommit\">false</Set>                \
    \ <Set name=\"initialSize\">0</Set>                 <Set name=\"maxActive\">15</Set>\
    \                 <Set name=\"minIdle\">0</Set>                 <Set name=\"maxIdle\"\
    >5</Set>                 <Set name=\"maxWait\">2000</Set>             </New> \
    \        </Arg>     </New> </Configure> } </pre>"
  shortDescription: "Indicates whether JNDI data sources retrieved should be proxied\
    \ or returned back verbatim."
  name: "cas.authn.pm.jdbc.data-source-proxy"
  defaultValue: false
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "Hibernate feature to automatically validate and exports DDL to the\
    \ schema. By default, creates and drops the schema automatically when a session\
    \ is starts and ends. Setting the value to {@code validate} or {@code none} may\
    \ be more desirable for production, but any of the following options can be used:\
    \ <ul>     <li>{@code validate}: Validate the schema, but make no changes to the\
    \ database.</li>     <li>{@code update}: Update the schema.</li>     <li>{@code\
    \ create}: Create the schema, destroying previous data.</li>     <li>{@code create-drop}:\
    \ Drop the schema at the end of the session.</li>     <li>{@code none}: Do nothing.</li>\
    \ </ul> <p> Note that during a version migration where any schema has changed\
    \ {@code create-drop} will result in the loss of all data as soon as CAS is started.\
    \ For transient data like tickets this is probably not an issue, but in cases\
    \ like the audit table important data could be lost. Using `update`, while safe\
    \ for data, is confirmed to result in invalid database state. {@code validate}\
    \ or {@code none} settings are likely the only safe options for production use.\
    \ </p> For more info, <a href=\"http://docs.spring.io/spring-framework/docs/current/javadoc-api\"\
    >see this</a>."
  shortDescription: "Hibernate feature to automatically validate and exports DDL to\
    \ the schema."
  name: "cas.authn.pm.jdbc.ddl-auto"
  defaultValue: "update"
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "Qualifies unqualified table names with the given catalog in generated\
    \ SQL."
  shortDescription: "Qualifies unqualified table names with the given catalog in generated\
    \ SQL."
  name: "cas.authn.pm.jdbc.default-catalog"
  defaultValue: ""
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "Qualify unqualified table names with the given schema/tablespace in\
    \ generated SQL."
  shortDescription: "Qualify unqualified table names with the given schema/tablespace\
    \ in generated SQL."
  name: "cas.authn.pm.jdbc.default-schema"
  defaultValue: ""
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "The database dialect is a configuration setting for platform independent\
    \ software (JPA, Hibernate, etc) which allows such software to translate its generic\
    \ SQL statements into vendor specific DDL, DML."
  shortDescription: "The database dialect is a configuration setting for platform\
    \ independent software (JPA, Hibernate, etc) which allows such software to translate\
    \ its generic SQL statements into vendor specific DDL, DML."
  name: "cas.authn.pm.jdbc.dialect"
  defaultValue: "org.hibernate.dialect.HSQLDialect"
- required: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "The JDBC driver used to connect to the database."
  shortDescription: "The JDBC driver used to connect to the database."
  name: "cas.authn.pm.jdbc.driver-class"
  defaultValue: "org.hsqldb.jdbcDriver"
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.Long"
  description: "Set the pool initialization failure timeout. <ul> <li>Any value greater\
    \ than zero will be treated as a timeout for pool initialization. The calling\
    \ thread will be blocked from continuing until a successful connection to the\
    \ database, or until the timeout is reached.  If the timeout is reached, then\
    \ a {@code PoolInitializationException} will be thrown. </li> <li>A value of zero\
    \ will <i>not</i>  prevent the pool from starting in the case that a connection\
    \ cannot be obtained. However, upon start the pool will attempt to obtain a connection\
    \ and validate that the {@code connectionTestQuery} and {@code connectionInitSql}\
    \ are valid.  If those validations fail, an exception will be thrown.  If a connection\
    \ cannot be obtained, the validation is skipped and the the pool will start and\
    \ continue to try to obtain connections in the background. This can mean that\
    \ callers to {@code DataSource#getConnection()} may encounter exceptions. </li>\
    \ <li>A value less than zero will <i>not</i> bypass any connection attempt and\
    \ validation during startup, and therefore the pool will start immediately.  The\
    \ pool will continue to try to obtain connections in the background. This can\
    \ mean that callers to {@code DataSource#getConnection()} may encounter exceptions.\
    \ </li> </ul> Note that if this timeout value is greater than or equal to zero\
    \ (0), and therefore an initial connection validation is performed, this timeout\
    \ does not override the {@code connectionTimeout} or {@code validationTimeout};\
    \ they will be honored before this timeout is applied.  The default value is one\
    \ millisecond."
  shortDescription: "Set the pool initialization failure timeout."
  name: "cas.authn.pm.jdbc.fail-fast-timeout"
  defaultValue: 1
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "The SQL query to be executed to test the validity of connections."
  shortDescription: "The SQL query to be executed to test the validity of connections."
  name: "cas.authn.pm.jdbc.health-query"
  defaultValue: ""
- duration: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "Controls the maximum amount of time that a connection is allowed to\
    \ sit idle in the pool."
  shortDescription: "Controls the maximum amount of time that a connection is allowed\
    \ to sit idle in the pool."
  name: "cas.authn.pm.jdbc.idle-timeout"
  defaultValue: "PT10M"
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.Boolean"
  description: "This property determines whether data source isolates internal pool\
    \ queries, such as the connection alive test, in their own transaction. <p> Since\
    \ these are typically read-only queries, it is rarely necessary to encapsulate\
    \ them in their own transaction. This property only applies if {@link #autocommit}\
    \ is disabled."
  shortDescription: "This property determines whether data source isolates internal\
    \ pool queries, such as the connection alive test, in their own transaction."
  name: "cas.authn.pm.jdbc.isolate-internal-queries"
  defaultValue: false
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "Defines the isolation level for transactions. @see org.springframework.transaction.TransactionDefinition"
  shortDescription: "Defines the isolation level for transactions."
  name: "cas.authn.pm.jdbc.isolation-level-name"
  defaultValue: "ISOLATION_READ_COMMITTED"
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.Integer"
  description: "Controls the amount of time that a connection can be out of the pool\
    \ before a message is logged indicating a possible connection leak."
  shortDescription: "Controls the amount of time that a connection can be out of the\
    \ pool before a message is logged indicating a possible connection leak."
  name: "cas.authn.pm.jdbc.leak-threshold"
  defaultValue: 3000
- required: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "The database connection password."
  shortDescription: "The database connection password."
  name: "cas.authn.pm.jdbc.password"
  defaultValue: ""
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "Fully-qualified name of the class that can control the physical naming\
    \ strategy of hibernate."
  shortDescription: "Fully-qualified name of the class that can control the physical\
    \ naming strategy of hibernate."
  name: "cas.authn.pm.jdbc.physical-naming-strategy-class-name"
  defaultValue: "org.apereo.cas.hibernate.CasHibernatePhysicalNamingStrategy"
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "Defines the propagation behavior for transactions. @see org.springframework.transaction.TransactionDefinition"
  shortDescription: "Defines the propagation behavior for transactions."
  name: "cas.authn.pm.jdbc.propagation-behavior-name"
  defaultValue: "PROPAGATION_REQUIRED"
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.util.Map<java.lang.String,java.lang.String>"
  description: "Additional settings provided by Hibernate in form of key-value pairs."
  shortDescription: "Additional settings provided by Hibernate in form of key-value\
    \ pairs."
  name: "cas.authn.pm.jdbc.properties"
  defaultValue: ""
- required: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "SQL query to change the password and update."
  shortDescription: "SQL query to change the password and update."
  name: "cas.authn.pm.jdbc.sql-change-password"
  defaultValue: ""
- required: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "SQL query to locate the user email address."
  shortDescription: "SQL query to locate the user email address."
  name: "cas.authn.pm.jdbc.sql-find-email"
  defaultValue: ""
- required: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "SQL query to locate the user phone number."
  shortDescription: "SQL query to locate the user phone number."
  name: "cas.authn.pm.jdbc.sql-find-phone"
  defaultValue: ""
- required: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "SQL query to locate the user via email."
  shortDescription: "SQL query to locate the user via email."
  name: "cas.authn.pm.jdbc.sql-find-user"
  defaultValue: ""
- module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "SQL query to locate security questions for the account, if any."
  shortDescription: "SQL query to locate security questions for the account, if any."
  name: "cas.authn.pm.jdbc.sql-security-questions"
  defaultValue: ""
- expressionLanguage: true
  required: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "The database connection URL."
  shortDescription: "The database connection URL."
  name: "cas.authn.pm.jdbc.url"
  defaultValue: "jdbc:hsqldb:mem:cas-hsql-database"
- required: true
  module: "cas-server-support-pm-jdbc"
  owner: "org.apereo.cas.configuration.model.support.pm.JdbcPasswordManagementProperties"
  type: "java.lang.String"
  description: "The database user. <p> The database user must have sufficient permissions\
    \ to be able to handle schema changes and updates, when needed."
  shortDescription: "The database user."
  name: "cas.authn.pm.jdbc.user"
  defaultValue: "sa"
